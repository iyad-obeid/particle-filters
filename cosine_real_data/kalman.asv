clc
clear all
%close all
load kinematics

T = 545;
t = (0:dt:T-dt);
tTrain = 30; % length of training session
L = length(t);
B = 100; % window size
M = tTrain/dt/B;
nIterations = floor(L/B);
theta = kinematics(1:L,2)';

% neuron_list = [ 80 ...
%     81  82  83 84 85 86 87 88 89 90 91 92 93 94 95 96 100 ...
%     101 102 103 104 105 106  108 109 110 111 112 113 114 115 116 117 118 119 120   ...
%     121 122 123 124 125 126 128     130 131 132 133  135 136 137 138 139 140 ...
%     141 142 143 144 145 146 147 148 149  151 152 153 154 155 156 158];
% neuron_list = 33 45 46 52 56 60 66 69 

neuron_list = 80:158;
%r = find(N_total(neuron_list) > 1000 & N_total(neuron_list) < 15000);
r = find(N_total(neuron_list) > 2000);
neuron_list = neuron_list(r);

C = length(neuron_list); % number of neurons
% load firing times for neuron 'm'
for m = 1:length(neuron_list)
    neuron_number = neuron_list(m);
    eval(['load neuron', num2str(neuron_number)]);
    eval(['N(:,', num2str(m),') = N', num2str(neuron_number),';']);
    eval(['clear N', num2str(neuron_number)]);
end
N = N(1:L,:)';

nFirings = zeros(C,nIterations);
for b = 1:nIterations
    blockStart = b*B+1-B;
    blockEnd   = b*B;
    nFirings(:,b) = sum(N(:,blockStart:blockEnd),2);
end

z = nFirings/(B*dt);
X  = downsample(theta(1, 1:tTrain/dt), B);
X1 = X(1,1:(end-1));
X2 = X(2:M);
Z  = z(:,1:M);

A = X2*X1'/(X1*X1');
H = Z*X'/(X*X');
W = (X2 - A*X1)*(X2-A*X1)'/(M-1);
Q = (Z - H*X)*(Z - H*X)'/M;

x = zeros(1,nIterations);
x(1,1) = pi/2;
P = eye(size(W));
for k = 2:nIterations
    x(:,k) = A*x(:,k-1);
    P = A*P*A' + W;
    K = P*H'/(H*P*H' + Q);
    x(:,k) = x(:,k) + K*(z(:,k) - H*x(:,k));
    P = (eye(size(P)) - K*H)*P;
end
theta_ds = downsample(theta, B);
t2 = downsample(t, B);
% figure, plot(t2, theta_ds, t2, x), 
% xlabel('time (s)'), ylabel('\phi (rad)'), grid on,

p = polyfit(theta_ds, x,1);
f = polyval(p, theta_ds);
sserr = sum((x - f).^2);
sstot = sum((x - mean(x)).^2);
r2 = 1-sserr/sstot;
disp(sqrt(r2));

L1 = ['# neurons = ', num2str(C), ...
    ' block size = ', num2str(B)];
L2 = ['r = ', num2str(sqrt(r2))];
figure, plot(t2, x,'k--'), grid on, hold on, ...
    plot(t2, theta_ds,'r', 'LineWidth',2), hold on, ...
   % plot([t2(tTrain/dt/B) t2(tTrain/dt/B)], [0 pi],'k--','LineWidth',2), ...
    xlabel('time (s)'), ylabel('\phi (rad)'), ...
    ylim([0 pi]), xlim([300 330]), ...
    legend('\phi_{est}', '\phi_{tru}', 'end training', 'Location', 'SouthEast'), ...
   % title(L2)