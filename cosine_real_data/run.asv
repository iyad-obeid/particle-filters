clc
clear all
%close all
load kinematics
tmax = 30;
t = (0:dt:tmax-dt)';
s = kinematics(1, 1:tmax*(1/dt))' + ...
    abs(min(kinematics(1, 1:tmax*(1/dt))));

clear kinematics

neuron_list = 1:158;

nParticles = 40;
blockSize  = 50;
kappa.theta_p1 = 300;
kappa.theta_p2 = 300;
gamma_const = 15;
beta_const = gamma_const;
nIterations= floor(length(t)/blockSize);
nSimulations = 1;
nNeurons = 1;
theta_p_init = pi/2;

P_new(1:nParticles) = struct('s',0,...
    'gamma', gamma_const*ones(1, nNeurons),...
    'theta_p',zeros(1, nNeurons),...
    'beta', beta_const*ones(1, nNeurons),...
    'g',zeros(1,1),...
    'likelihood',zeros(1,1),...
    'resampled_likelihood',zeros(1,1),...
    'w',ones(1,1));
P_old = P_new;
s_ds = downsample(s, blockSize);

x_estimate.theta_p= zeros(nIterations, nNeurons);
x_estimate.s = zeros(nIterations, 1);

for m = 1:length(neuron_list)
    % create directory for neuron
    neuron_number = neuron_list(m);
    mkdir(['neuron', num2str(neuron_number)]);
    % load firing times for neuron 'm'
    eval(['load neuron', num2str(neuron_number)]);
    eval(['N(:,1) = N', num2str(neuron_number), '_resampled(1:length(s));']);
    eval(['clear N', num2str(neuron_number), ' N', num2str(neuron_number), '_resampled']);
    
    
    for sim_num = 1:nSimulations
        disp(['simulation #', num2str(sim_num),...
            ' of ', num2str(nSimulations), ' for neuron ', num2str(neuron_number)]);
        P_new(1:nParticles) = struct('s',0,...
            'gamma', gamma_const*ones(1, nNeurons),...
            'theta_p',zeros(1, nNeurons),...
            'beta', beta_const*ones(1, nNeurons),...
            'g',zeros(1,1),...
            'likelihood',zeros(1,1),...
            'resampled_likelihood',zeros(1,1),...
            'w',ones(1,1));
        x_estimate.theta_p = zeros(nIterations, nNeurons);

        % initialize first iteration
        for p =1:nParticles
            P_old(p).theta_p(1,:)= theta_p_init;
            x_estimate.theta_p(1, :) = theta_p_init;
        end

        tic;
        for k = 2:nIterations
            %disp(['block number ', num2str(k), ' of ', num2str(nIterations)]);
            % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
            % % % % % % % % Step1: draw random samples  % % % % % % %
            for p = 1:nParticles
                P_new(p).s = s_ds(k,1);
                for n = 1:nNeurons
                    P_new(p).theta_p(1,n)   = mod(randraw('vonmises', [P_old(p).theta_p(1,n), kappa.theta_p1], 1), 2*pi);
                end
                temp.theta_p(p,:) = P_new(p).theta_p(1,:);
            end

            % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
            % % % % % % % % Step2: compute likelihoods % % % % % % % %
            norm_sum = 0;
            for p = 1:nParticles
                particle = P_new(p);
                blockStart = (k-1)*blockSize + 1;
                blockEnd   = blockStart + blockSize - 1;
                nFirings = sum(N(blockStart:blockEnd,:),1);
                P_new(p).likelihood(1,1)=compute_likelihood(particle, nFirings, blockSize, dt);
                P_new(p).g(1,1) = P_old(p).w((1),1)*P_new(p).likelihood(1,1);
                norm_sum = norm_sum + P_new(p).g(1,1);
            end
            % normalize
            prob_vector = zeros(1, nParticles);
            for p = 1:nParticles
                P_new(p).g(1,1) = P_new(p).g(1,1)/norm_sum;
                prob_vector(1,p) = P_new(p).g(1,1);
            end

            % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
            % % % % % % % % Step 3: resample % % % % % % % % % % % % %
            resampleIndicies = randsample((1:nParticles), nParticles, 'true', prob_vector);
            for p = 1:nParticles
                P_new(p).theta_p(1,:)=temp.theta_p(resampleIndicies(p),:);
            end

            % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
            % % % % % % % % Ste 4: draw random samples  % % % % % % %
            for p = 1:nParticles
                for n = 1:nNeurons
                    P_new(p).theta_p(1,n) = mod(randraw('vonmises', [P_new(p).theta_p(1,n), kappa.theta_p2], 1), 2*pi);
                end
            end

            % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
            % % % % % % % % Step 5: Compute resampled likelihoods % %
            norm_sum = 0;
            for p = 1:nParticles
                particle = P_new(p);
                P_new(p).resampled_likelihood(1,1) = compute_likelihood(particle, nFirings, blockSize, dt);
                P_new(p).w(1,1) = P_new(p).resampled_likelihood(1,1)/P_new(p).likelihood(1,1);
                norm_sum = norm_sum + P_new(p).w(1,1);
            end
            % normalize
            for p = 1:nParticles
                P_new(p).w(1,1) = P_new(p).w(1,1)/norm_sum;
            end

            % % % % % % % % % % % % % % % % % % % % % % % % % % % % %
            % Step 6: Compute weighted estimate % % % % % % % % % % %
            for p = 1:nParticles
                x_estimate.theta_p(k,:) = P_new(p).theta_p(1,:)*P_new(p).w(1,1) + x_estimate.theta_p(k,:);
            end
            P_old = P_new;
        end
        tElapsed = toc;
        disp(['Elapsed time = ', num2str(tElapsed/60), 'minutes']);
        fname = [cd,'/neuron', num2str(neuron_number), '/simulation', num2str(sim_num)];
        t2 = 0:dt*blockSize:tmax-dt;
        save(fname, 'x_estimate', 't2');
    end
    eval(['clear N', num2str(neuron_number), ' N', num2str(neuron_number), '_resampled']);
end
save neuron_list neuron_list nSimulations tElapsed
save s s t

% t2 = 0:dt*blockSize:tmax-dt;
% figure, plot(t2, x_estimate.theta_p(:,1), t, s, 'LineWidth',2),...
%   ylim([0 2*pi]), grid on;